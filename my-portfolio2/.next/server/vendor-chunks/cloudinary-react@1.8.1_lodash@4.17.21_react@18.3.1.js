/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cloudinary-react@1.8.1_lodash@4.17.21_react@18.3.1";
exports.ids = ["vendor-chunks/cloudinary-react@1.8.1_lodash@4.17.21_react@18.3.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/cloudinary-react@1.8.1_lodash@4.17.21_react@18.3.1/node_modules/cloudinary-react/dist/cloudinary-react.js":
/*!***************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/cloudinary-react@1.8.1_lodash@4.17.21_react@18.3.1/node_modules/cloudinary-react/dist/cloudinary-react.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@13.5.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/../node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js\");\nvar cloudinaryCore = __webpack_require__(/*! cloudinary-core */ \"(ssr)/../node_modules/.pnpm/cloudinary-core@2.13.1_lodash@4.17.21/node_modules/cloudinary-core/cloudinary-core.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _excluded$2 = [\"public_id\"],\n    _excluded2 = [\"publicId\"],\n    _excluded3 = [\"children\"],\n    _excluded4 = [\"children\", \"accessibility\", \"placeholder\"];\nvar camelCase$1 = cloudinaryCore.Util.camelCase,\n    withCamelCaseKeys = cloudinaryCore.Util.withCamelCaseKeys,\n    isEmpty = cloudinaryCore.Util.isEmpty; // props passed to cloudinary-core but should not be rendered as dom attributes\n\nvar CLOUDINARY_REACT_PROPS = ['accessibility', 'breakpoints', 'dataSrc', 'placeholder', 'publicId', 'signature', 'authToken'];\n/**\n * Convert common video file extensions to mime types\n * Most other common video file extensions have an identical mime type so do not need conversion.\n */\n\nvar VIDEO_MIME_TYPES = {\n  flv: 'x-flv',\n  '3gp': '3gpp',\n  mov: 'quicktime',\n  mpg: 'mpeg',\n  avi: 'x-msvideo',\n  wmv: 'x-ms-wmv',\n  ogv: 'ogg'\n};\n/**\n * Convert common audio file extensions to mime types\n * Most other common audio file extensions have an identical mime type so do not need conversion.\n */\n\nvar AUDIO_MIME_TYPES = {\n  m4a: 'mp4',\n  wav: 'vnd.wav',\n  m3u: 'x-mpegurl',\n  mp3: 'mpeg',\n  ogv: 'ogg',\n  aif: 'x-aiff',\n  aifc: 'x-aiff',\n  aiff: 'x-aiff'\n}; // props passed to cloudinary-core for dom elements attributes generation\n// Map Cloudinary props from array to object for efficient lookup\n\nvar CLOUDINARY_PROPS = [].concat(cloudinaryCore.Transformation.PARAM_NAMES, CLOUDINARY_REACT_PROPS).map(cloudinaryCore.Util.camelCase).reduce(function (accumulator, cloudinaryPropName) {\n  accumulator[cloudinaryPropName] = true;\n  return accumulator;\n}, {});\n/**\n * Return object without null/undefined entries\n * @param {*} obj\n */\n\nvar nonEmpty = function nonEmpty(obj) {\n  return Object.entries(obj).reduce(function (a, _ref) {\n    var _extends2;\n\n    var k = _ref[0],\n        v = _ref[1];\n    return v == null ? a : _extends({}, a, (_extends2 = {}, _extends2[k] = v, _extends2));\n  }, {});\n};\n/**\n * Generated a configured Cloudinary object.\n * @param extendedProps React props combined with custom Cloudinary configuration options\n * @return {Cloudinary} configured using extendedProps\n */\n\n\nvar getConfiguredCloudinary = function getConfiguredCloudinary(extendedProps) {\n  // eslint-disable-next-line camelcase\n  var _nonEmpty = nonEmpty(extendedProps),\n      ops = _objectWithoutPropertiesLoose(_nonEmpty, _excluded$2); // Remove null/undefined props\n\n\n  var options = cloudinaryCore.Util.withSnakeCaseKeys(ops);\n  return cloudinaryCore.Cloudinary[\"new\"](options);\n};\n\nvar getTag = function getTag(props, tagType) {\n  var publicId = props.publicId,\n      ops = _objectWithoutPropertiesLoose(props, _excluded2); // Remove null/undefined props\n\n\n  var cld = getConfiguredCloudinary(ops);\n  return cld[tagType + \"Tag\"](publicId, cloudinaryCore.Util.withSnakeCaseKeys(ops));\n};\n/**\n * Get a new <img> tag initialized with given props\n * @param {*} props\n */\n\n\nvar getImageTag = function getImageTag(props) {\n  return getTag(props, 'image');\n};\n/**\n * Cloudinary underlying JS library will handle responsive behavior\n * @param {HTMLImageElement} img\n * @param {object} options\n * @Return callback that when called, will remove the listener created by Cloudinary.responsive\n */\n\n\nvar makeElementResponsive = function makeElementResponsive(img, options) {\n  var snakeCaseOptions = cloudinaryCore.Util.withSnakeCaseKeys(options);\n  var cld = getConfiguredCloudinary(snakeCaseOptions); // Initialize cloudinary with new props\n\n  cld.cloudinary_update(img, snakeCaseOptions);\n  return cld.responsive(snakeCaseOptions, false);\n};\n/**\n * Extracts cloudinaryProps and nonCloudinaryProps from given props\n *\n * @param props\n * @returns {{children: *, cloudinaryReactProps: {}, cloudinaryProps: {}, nonCloudinaryProps: {}}}\n */\n\n\nvar extractCloudinaryProps = function extractCloudinaryProps(_ref2) {\n  var children = _ref2.children,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded3);\n\n  var result = {\n    children: children,\n    cloudinaryProps: {},\n    nonCloudinaryProps: {},\n    cloudinaryReactProps: {}\n  };\n  Object.keys(props).forEach(function (key) {\n    var camelKey = cloudinaryCore.Util.camelCase(key);\n    var value = props[key]; // if valid and defined add to cloudinaryProps\n\n    if (CLOUDINARY_PROPS[camelKey]) {\n      if (props[key] !== undefined && props[key] !== null) {\n        result.cloudinaryProps[camelKey] = value;\n      }\n    } else if (camelKey === 'includeOwnBody') {\n      // cloudinary-react specific prop\n      result.cloudinaryReactProps[camelKey] = value;\n    } else {\n      // not valid so add to nonCloudinaryProps\n      result.nonCloudinaryProps[key] = value;\n    }\n  });\n  return result;\n};\n/**\n * Check if given component is a Cloudinary Component with given displayName\n * @param component the component to check\n * @param displayName of wanted component\n * @return {boolean}\n */\n\n\nvar isCloudinaryComponent = function isCloudinaryComponent(component, displayName) {\n  return !!( /*#__PURE__*/React__default[\"default\"].isValidElement(component) && component.type && component.type.displayName === displayName);\n};\n/**\n * Combine properties of all options to create an option Object that can be passed to Cloudinary methods.<br>\n *   `undefined` and `null` values are filtered out.\n * @protected\n * @returns {Object}\n * @param options one or more options objects\n */\n\n\nvar normalizeOptions = function normalizeOptions() {\n  return [].slice.call(arguments).reduce(function (left, right) {\n    Object.keys(right || {}).forEach(function (key) {\n      var value = right[key];\n\n      if (value !== null && value !== undefined) {\n        left[key] = value;\n      }\n    });\n    return left;\n  }, {});\n};\n\nvar getChildPlaceholder = function getChildPlaceholder(children) {\n  var result = null;\n\n  if (children) {\n    result = React__default[\"default\"].Children.toArray(children).find(function (child) {\n      return isCloudinaryComponent(child, 'CloudinaryPlaceholder');\n    });\n  }\n\n  return result;\n};\n\nvar getChildTransformations = function getChildTransformations(children) {\n  var result = children ? React__default[\"default\"].Children.toArray(children).filter(function (child) {\n    return isCloudinaryComponent(child, 'CloudinaryTransformation');\n  }).map(function (child) {\n    var options = normalizeOptions(child.props, child.context);\n    var childOptions = getChildTransformations(child.props.children);\n\n    if (childOptions) {\n      options.transformation = childOptions;\n    }\n\n    return options;\n  }) : [];\n  return result.length ? result : null;\n};\n/**\n * Return a new object containing keys and values where keys are in the keys list\n * @param {object} source Object to copy values from\n * @param {string[]} [keys=[]] a list of keys\n * @returns {object} an object with copied values\n */\n\n\nvar only = function only(source, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  if (!source) {\n    return source;\n  }\n\n  return keys.reduce(function (tr, key) {\n    if (key in source) {\n      tr[key] = source[key];\n    }\n\n    return tr;\n  }, {});\n};\n/**\n   * Create a React type definition object. All items are PropTypes.string or [string] or object or [object].\n   * @param {Array} configParams a list of parameter names\n   * @returns {Object}\n   * @private\n   */\n\n\nvar typesFrom = function typesFrom(configParams) {\n  configParams = configParams || [];\n  var types = {};\n\n  for (var i = 0; i < configParams.length; i++) {\n    var key = configParams[i];\n    types[camelCase$1(key)] = PropTypes__default[\"default\"].any;\n  }\n\n  return types;\n};\n/**\n * Returns an object with all the transformation parameters based on the context and properties of this element\n * and any children.\n * @param extendedProps\n * @returns {object} a hash of transformation and configuration parameters\n * @protected\n */\n\n\nvar getTransformation = function getTransformation(extendedProps) {\n  var children = extendedProps.children,\n      accessibility = extendedProps.accessibility,\n      placeholder = extendedProps.placeholder,\n      rest = _objectWithoutPropertiesLoose(extendedProps, _excluded4);\n\n  var ownTransformation = only(withCamelCaseKeys(rest), cloudinaryCore.Transformation.methods) || {};\n  var childrenOptions = getChildTransformations(children);\n\n  if (!isEmpty(childrenOptions)) {\n    ownTransformation.transformation = childrenOptions;\n  } // Append placeholder and accessibility if exists\n\n\n  var advancedTransformations = {\n    accessibility: accessibility,\n    placeholder: placeholder\n  };\n  Object.keys(advancedTransformations).filter(function (k) {\n    return advancedTransformations[k];\n  }).forEach(function (k) {\n    ownTransformation[k] = advancedTransformations[k];\n  });\n  return ownTransformation;\n};\n\nvar CloudinaryContextType = /*#__PURE__*/React.createContext();\n\nvar camelCase = cloudinaryCore.Util.camelCase;\n/**\n * A base component for Cloudinary components.\n * @protected\n */\n\nvar CloudinaryComponent = /*#__PURE__*/function (_PureComponent) {\n  _inheritsLoose(CloudinaryComponent, _PureComponent);\n\n  function CloudinaryComponent(_props, _context) {\n    var _this;\n\n    _this = _PureComponent.call(this, _props, _context) || this;\n\n    _this.getContext = function () {\n      return _this.context || {};\n    };\n\n    _this.onIntersect = function () {\n      // eslint-disable-next-line react/no-unused-state\n      _this.setState({\n        isInView: true\n      });\n    };\n\n    _this.getExtendedProps = function (props, context) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      if (context === void 0) {\n        context = _this.getContext();\n      }\n\n      return normalizeOptions(context, props);\n    };\n\n    _this.attachRef = function (element) {\n      var innerRef = _this.props.innerRef;\n      _this.element.current = element;\n\n      if (innerRef) {\n        if (innerRef instanceof Function) {\n          innerRef(element);\n        } else {\n          innerRef.current = element;\n        }\n      }\n    };\n\n    _this.element = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  var _proto = CloudinaryComponent.prototype;\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return CloudinaryComponent;\n}(React.PureComponent);\n\nCloudinaryComponent.defaultProps = {\n  innerRef: null,\n  publicId: null\n};\nCloudinaryComponent.propTypes = _extends({}, typesFrom(cloudinaryCore.Transformation.PARAM_NAMES.map(camelCase)), {\n  innerRef: PropTypes__default[\"default\"].any,\n  publicId: PropTypes__default[\"default\"].string\n});\nCloudinaryComponent.contextType = CloudinaryContextType;\n\n/**\n * Provides a container for Cloudinary components. Any option set in CloudinaryContext will be passed to the children.\n *\n * @example\n *<CloudinaryContext cloudName=\"mycloud\" dpr=\"auto\">\n *    <!-- other tags -->\n *    <Image publicId={id}/>\n *</CloudinaryContext>\n *\n */\n\nvar CloudinaryContext = /*#__PURE__*/function (_CloudinaryComponent) {\n  _inheritsLoose(CloudinaryContext, _CloudinaryComponent);\n\n  function CloudinaryContext() {\n    return _CloudinaryComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = CloudinaryContext.prototype;\n\n  _proto.render = function render() {\n    var props = _extends({}, this.getContext(), this.props);\n\n    var _extractCloudinaryPro = extractCloudinaryProps(props),\n        children = _extractCloudinaryPro.children,\n        cloudinaryProps = _extractCloudinaryPro.cloudinaryProps,\n        nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps,\n        cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps;\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(CloudinaryContextType.Provider, {\n      value: cloudinaryProps\n    }, cloudinaryReactProps.includeOwnBody ? children : /*#__PURE__*/React__default[\"default\"].createElement(\"div\", nonCloudinaryProps, children));\n  };\n\n  return CloudinaryContext;\n}(CloudinaryComponent);\n\nCloudinaryContext.propTypes = _extends({}, CloudinaryComponent.propTypes, {\n  includeOwnBody: PropTypes__default[\"default\"].bool\n});\nCloudinaryContext.defaultProps = {\n  includeOwnBody: false\n};\n\nvar _excluded$1 = [\"children\", \"innerRef\"];\nvar RESPONSIVE_OVERRIDE_WARNING = \"\\nWarning: passing a number value for width cancels the 'responsive' prop's effect on the image transformation.\\nThe 'responsive' prop affects the image transformation only when width === 'auto'.\\nPassing 'width=\\\"auto\\\" responsive' will affect the actual image width that is fetched from Cloudinary.\\nThe 'responsive' prop causes the Image component to request an image which width is equal to the width of it's container.\\nWhen passing 'width=\\\"auto\\\" responsive', you can set the <img> element width by passing a 'style' prop\".trim();\n/**\n * A component representing a Cloudinary served image\n */\n\nvar Image = /*#__PURE__*/function (_CloudinaryComponent) {\n  _inheritsLoose(Image, _CloudinaryComponent);\n\n  function Image(props, context) {\n    var _this;\n\n    _this = _CloudinaryComponent.call(this, props, context) || this;\n\n    _this.isResponsive = function () {\n      var _this$getExtendedProp = _this.getExtendedProps(),\n          responsive = _this$getExtendedProp.responsive,\n          width = _this$getExtendedProp.width;\n\n      if (responsive && width !== 'auto') {\n        console.warn(RESPONSIVE_OVERRIDE_WARNING);\n      }\n\n      return responsive && _this.element && _this.element.current;\n    };\n\n    _this.getOptions = function () {\n      var extendedProps = _this.getExtendedProps();\n\n      var _extendedProps$getTra = _extends({}, extendedProps, getTransformation(extendedProps)),\n          options = _objectWithoutPropertiesLoose(_extendedProps$getTra, _excluded$1);\n\n      if (!_this.shouldLazyLoad()) {\n        delete options.loading;\n      }\n\n      return options;\n    };\n\n    _this.getAttributes = function (additionalOptions) {\n      if (additionalOptions === void 0) {\n        additionalOptions = {};\n      }\n\n      var _additionalOptions = additionalOptions,\n          placeholder = _additionalOptions.placeholder;\n      var options = extractCloudinaryProps(_extends({}, _this.getOptions(), additionalOptions));\n      var cloudinaryProps = options.cloudinaryProps,\n          nonCloudinaryProps = options.nonCloudinaryProps,\n          cloudinaryReactProps = options.cloudinaryReactProps;\n      var imageTag = getImageTag(_extends({}, cloudinaryProps, cloudinaryReactProps));\n      var cloudinaryAttributes = cloudinaryCore.Util.withCamelCaseKeys(imageTag.attributes()); // React requires camelCase instead of snake_case attributes\n\n      var attributes = _extends({}, cloudinaryAttributes, nonCloudinaryProps); // We want to keep 'data-src' if it exists\n\n\n      if (attributes.dataSrc) {\n        attributes['data-src'] = attributes.dataSrc;\n      } // Set placeholder Id\n\n\n      if (placeholder && attributes.id) {\n        attributes.id += '-cld-placeholder';\n      } // Set data-src if lazy loading and not in view\n\n\n      if (_this.shouldLazyLoad()) {\n        attributes['data-src'] = attributes.dataSrc || attributes.src;\n        delete attributes.src;\n      } // Remove unneeded attributes,\n\n\n      CLOUDINARY_REACT_PROPS.forEach(function (attr) {\n        delete attributes[attr];\n      });\n      return attributes;\n    };\n\n    _this.update = function () {\n      // Handle lazy loading\n      if (_this.shouldLazyLoad()) {\n        // Will set this.state.isInView = true when in view\n        cloudinaryCore.Util.detectIntersection(_this.element.current, _this.onIntersect);\n      } else if (_this.isResponsive()) {\n        var options = _this.getOptions();\n\n        var placeholder = _this.getPlaceholderType(); // Make placeholder responsive\n\n\n        if (placeholder) {\n          var removePlaceholderListener = makeElementResponsive(_this.placeholderElement.current, _extends({}, options, {\n            placeholder: placeholder\n          }));\n\n          _this.listenerRemovers.push(removePlaceholderListener);\n        } // Make original image responsive\n\n\n        var removeImgListener = makeElementResponsive(_this.element.current, options);\n\n        _this.listenerRemovers.push(removeImgListener);\n      }\n    };\n\n    _this.shouldLazyLoad = function () {\n      var _this$getExtendedProp2 = _this.getExtendedProps(),\n          loading = _this$getExtendedProp2.loading;\n\n      var isInView = _this.state.isInView;\n      return !isInView && (loading === 'lazy' || loading === 'auto');\n    };\n\n    _this.handleImageLoaded = function () {\n      var onLoad = _this.props.onLoad;\n\n      _this.setState({\n        isLoaded: true\n      }, function () {\n        if (onLoad) {\n          onLoad();\n        }\n      });\n    };\n\n    _this.renderPlaceholder = function (placeholder, attributes) {\n      attributes.style = _extends({}, attributes.style || {}, {\n        opacity: 0,\n        position: 'absolute'\n      });\n      attributes.onLoad = _this.handleImageLoaded;\n      var placeholderWrapperStyle = {\n        display: 'inline'\n      };\n\n      var placeholderAttributes = _this.getAttributes({\n        placeholder: placeholder\n      });\n\n      return /*#__PURE__*/React__default[\"default\"].createElement(React.Fragment, null, _this.renderImage(attributes), /*#__PURE__*/React__default[\"default\"].createElement(\"div\", {\n        style: placeholderWrapperStyle\n      }, /*#__PURE__*/React__default[\"default\"].createElement(\"img\", _extends({\n        ref: _this.placeholderElement\n      }, placeholderAttributes))));\n    };\n\n    _this.renderImage = function (attributes) {\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"img\", _extends({\n        ref: _this.attachRef\n      }, attributes));\n    };\n\n    _this.getPlaceholderType = function () {\n      var _this$getExtendedProp3 = _this.getExtendedProps(),\n          children = _this$getExtendedProp3.children;\n\n      var placeholder = getChildPlaceholder(children);\n      return placeholder ? placeholder.props.type : null;\n    };\n\n    _this.placeholderElement = /*#__PURE__*/React.createRef();\n    _this.state = {\n      isLoaded: false\n    };\n    _this.listenerRemovers = [];\n    return _this;\n  }\n  /**\n   * @return true when this image element should be made responsive, false otherwise.\n   */\n\n\n  var _proto = Image.prototype;\n\n  /**\n   * Invoked immediately after a component is mounted (inserted into the tree)\n   */\n  _proto.componentDidMount = function componentDidMount() {\n    this.update();\n  }\n  /**\n   * Invoked immediately after updating occurs. This method is not called for the initial render.\n   */\n  ;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this.update();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.listenerRemovers.forEach(function (removeListener) {\n      return removeListener();\n    });\n  }\n  /**\n   * Updates this Image's isLoaded state,\n   * And fires props.onLoad if exists.\n   */\n  ;\n\n  _proto.render = function render() {\n    var isLoaded = this.state.isLoaded;\n    var attributes = this.getAttributes();\n    var placeholder = this.getPlaceholderType(); // If image wasn't loaded and there's a child placeholder then we render it.\n\n    if (!isLoaded && placeholder) {\n      return this.renderPlaceholder(placeholder, attributes);\n    }\n\n    return this.renderImage(attributes);\n  };\n\n  return Image;\n}(CloudinaryComponent);\n\nImage.defaultProps = {};\nImage.propTypes = CloudinaryComponent.propTypes;\nImage.propTypes.responsive = PropTypes__default[\"default\"].bool;\nImage.propTypes.loading = PropTypes__default[\"default\"].string;\nImage.propTypes.accessibility = PropTypes__default[\"default\"].string;\n\n/**\n * Define a transformation that is applied to the parent tag.\n */\n\nvar Transformation = /*#__PURE__*/function (_CloudinaryComponent) {\n  _inheritsLoose(Transformation, _CloudinaryComponent);\n\n  function Transformation() {\n    return _CloudinaryComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Transformation.prototype;\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Transformation;\n}(CloudinaryComponent);\n\nTransformation.propTypes = CloudinaryComponent.propTypes;\nTransformation.defaultProps = {};\nTransformation.exposesProps = true;\nTransformation.displayName = 'CloudinaryTransformation';\n\nvar _excluded = [\"innerRef\", \"publicId\", \"fallback\", \"children\", \"sourceTypes\", \"sourceTransformation\", \"sources\"];\n/**\n * A component representing a Cloudinary served video\n */\n\nvar Video = /*#__PURE__*/function (_CloudinaryComponent) {\n  _inheritsLoose(Video, _CloudinaryComponent);\n\n  function Video() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _CloudinaryComponent.call.apply(_CloudinaryComponent, [this].concat(args)) || this;\n    _this.mimeType = 'video';\n    _this.mimeSubTypes = VIDEO_MIME_TYPES;\n\n    _this.getMergedProps = function () {\n      return _extends({}, _this.getContext(), _this.props);\n    };\n\n    _this.generateVideoUrl = function (cld, publicId, childTransformations, sourceTransformations, sourceType) {\n      var urlOptions = cloudinaryCore.Util.withSnakeCaseKeys(cloudinaryCore.Util.defaults({}, sourceTransformations, childTransformations, {\n        resource_type: 'video',\n        format: sourceType\n      }));\n      return cld.url(publicId, urlOptions);\n    };\n\n    _this.generateUsingSourceTypes = function (cld, publicId, childTransformations, sourceTransformations, sourceTypes) {\n      return sourceTypes.map(function (sourceType) {\n        return _this.toSourceTag(cld, publicId, childTransformations, sourceTransformations[sourceType] || {}, sourceType, _this.buildMimeType(sourceType));\n      });\n    };\n\n    _this.generateUsingSources = function (cld, publicId, childTransformations, sources) {\n      return sources.map(function (_ref) {\n        var _ref$transformations = _ref.transformations,\n            transformations = _ref$transformations === void 0 ? {} : _ref$transformations,\n            type = _ref.type,\n            codecs = _ref.codecs;\n        return _this.toSourceTag(cld, publicId, childTransformations, transformations, type, _this.buildMimeType(type, codecs));\n      });\n    };\n\n    _this.toSourceTag = function (cld, publicId, childTransformations, transformations, sourceType, mimeType) {\n      var src = _this.generateVideoUrl(cld, publicId, childTransformations, transformations, sourceType);\n\n      return /*#__PURE__*/React__default[\"default\"].createElement(\"source\", {\n        key: src + mimeType,\n        src: src,\n        type: mimeType\n      });\n    };\n\n    _this.buildMimeType = function (type, codecs) {\n      var mimeType = _this.mimeType + \"/\" + (_this.mimeSubTypes[type] || type);\n\n      if (!cloudinaryCore.Util.isEmpty(codecs)) {\n        mimeType += \"; codecs=\" + (cloudinaryCore.Util.isArray(codecs) ? codecs.join(', ') : codecs);\n      }\n\n      return mimeType;\n    };\n\n    _this.getVideoTagProps = function () {\n      var _this$getMergedProps = _this.getMergedProps(),\n          publicId = _this$getMergedProps.publicId,\n          children = _this$getMergedProps.children,\n          sourceTypes = _this$getMergedProps.sourceTypes,\n          _this$getMergedProps$ = _this$getMergedProps.sourceTransformation,\n          sourceTransformation = _this$getMergedProps$ === void 0 ? {} : _this$getMergedProps$,\n          sources = _this$getMergedProps.sources,\n          options = _objectWithoutPropertiesLoose(_this$getMergedProps, _excluded);\n\n      options = normalizeOptions(options, {});\n\n      var _extractCloudinaryPro = extractCloudinaryProps(options),\n          cloudinaryProps = _extractCloudinaryPro.cloudinaryProps,\n          cloudinaryReactProps = _extractCloudinaryPro.cloudinaryReactProps,\n          nonCloudinaryProps = _extractCloudinaryPro.nonCloudinaryProps;\n\n      options = _extends({}, cloudinaryProps, cloudinaryReactProps); // const snakeCaseOptions = toSnakeCaseKeys(options);\n\n      var snakeCaseOptions = cloudinaryCore.Util.withSnakeCaseKeys(options);\n      var cld = cloudinaryCore.Cloudinary[\"new\"](snakeCaseOptions); // Use cloudinary-core to generate this video tag's attributes\n\n      var tagAttributes = cld.videoTag(publicId, options).attributes();\n      tagAttributes = _extends({}, cloudinaryCore.Util.withCamelCaseKeys(tagAttributes), nonCloudinaryProps); // Aggregate child transformations, used for generating <source> tags for this video element\n\n      var childTransformations = getTransformation(_extends({}, options, {\n        children: children\n      }));\n      var sourceElements = null;\n\n      if (cloudinaryCore.Util.isArray(sources) && !cloudinaryCore.Util.isEmpty(sources)) {\n        sourceElements = _this.generateUsingSources(cld, publicId, childTransformations, sources);\n      } else if (cloudinaryCore.Util.isArray(sourceTypes)) {\n        // We have multiple sourceTypes, so we generate <source> tags.\n        sourceElements = _this.generateUsingSourceTypes(cld, publicId, childTransformations, sourceTransformation, sourceTypes);\n      } else {\n        // We have a single source type so we generate the src attribute of this video element.\n        tagAttributes.src = _this.generateVideoUrl(cld, publicId, childTransformations, sourceTransformation[sourceTypes] || {}, sourceTypes);\n      }\n\n      return {\n        sources: sourceElements,\n        tagAttributes: tagAttributes\n      };\n    };\n\n    _this.reloadVideo = function () {\n      if (_this.element && _this.element.current) {\n        _this.element.current.load();\n      }\n    };\n\n    return _this;\n  }\n\n  var _proto = Video.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    // Load video on props change\n    this.reloadVideo();\n  }\n  /**\n   * Render a video element\n   */\n  ;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        fallback = _this$props.fallback,\n        children = _this$props.children;\n\n    var _this$getVideoTagProp = this.getVideoTagProps(),\n        tagAttributes = _this$getVideoTagProp.tagAttributes,\n        sources = _this$getVideoTagProp.sources;\n\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"video\", _extends({\n      ref: this.attachRef\n    }, tagAttributes), sources, fallback, children);\n  };\n\n  return Video;\n}(CloudinaryComponent);\n\nVideo.propTypes = {\n  publicId: PropTypes__default[\"default\"].string,\n  sources: PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].shape({\n    type: PropTypes__default[\"default\"].string,\n    codecs: PropTypes__default[\"default\"].oneOfType([PropTypes__default[\"default\"].string, PropTypes__default[\"default\"].arrayOf(PropTypes__default[\"default\"].string)]),\n    transformations: PropTypes__default[\"default\"].object\n  }))\n};\nVideo.defaultProps = {\n  sourceTypes: cloudinaryCore.Cloudinary.DEFAULT_VIDEO_PARAMS.source_types\n};\n\n/**\n * A component representing a Cloudinary served audio\n * This component extends the Video component and replaces it's render function.\n * Audio files are uploaded to Cloudinary as a video asset type.\n * An <audio> tag with a video source, will play the audio only.\n */\n\nvar Audio = /*#__PURE__*/function (_Video) {\n  _inheritsLoose(Audio, _Video);\n\n  function Audio() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Video.call.apply(_Video, [this].concat(args)) || this;\n    _this.mimeType = 'audio';\n    _this.mimeSubTypes = AUDIO_MIME_TYPES;\n    return _this;\n  }\n\n  var _proto = Audio.prototype;\n\n  /**\n   * Render an audio element\n   */\n  _proto.render = function render() {\n    var _this$props = this.props,\n        innerRef = _this$props.innerRef,\n        fallback = _this$props.fallback,\n        children = _this$props.children;\n\n    var _this$getVideoTagProp = this.getVideoTagProps(),\n        tagAttributes = _this$getVideoTagProp.tagAttributes,\n        sources = _this$getVideoTagProp.sources; // We generated video attributes, lets delete the unneeded poster\n\n\n    delete tagAttributes.poster;\n    return /*#__PURE__*/React__default[\"default\"].createElement(\"audio\", _extends({\n      ref: innerRef\n    }, tagAttributes), sources, fallback, children);\n  };\n\n  return Audio;\n}(Video);\n\nAudio.propTypes = {\n  publicId: PropTypes__default[\"default\"].string\n};\nAudio.defaultProps = {\n  sourceTypes: ['aac', 'mp3', 'ogg']\n};\n\n// eslint-disable-next-line no-unused-vars\n/**\n * Placeholder used by parent Image component, renders nothing on it's own.\n * @param type - type of placeholder 'blur'|'pixelate'|'predominant-color'|'vectorize',\n * @return {null}\n * @constructor\n */\n// eslint-disable-next-line no-unused-vars\n\nvar Placeholder = function Placeholder(_ref) {\n  return null;\n};\n\nPlaceholder.propTypes = {\n  type: PropTypes__default[\"default\"].string\n};\nPlaceholder.defaultProps = {\n  type: 'blur'\n};\nPlaceholder.displayName = 'CloudinaryPlaceholder';\n\nexports.Audio = Audio;\nexports.CloudinaryContext = CloudinaryContext;\nexports.Image = Image;\nexports.Placeholder = Placeholder;\nexports.Transformation = Transformation;\nexports.Video = Video;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/cloudinary-react@1.8.1_lodash@4.17.21_react@18.3.1/node_modules/cloudinary-react/dist/cloudinary-react.js\n");

/***/ })

};
;